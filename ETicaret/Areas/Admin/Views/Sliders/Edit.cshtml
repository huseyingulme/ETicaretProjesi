@model ETicaret.Core.Entities.Slider

@{
    ViewData["Title"] = "Slider Düzenle";
}

<div class="management-header">
    <div class="management-title">
        <i class="fas fa-edit"></i>
        <h1>Slider Düzenle</h1>
    </div>
    <p class="management-subtitle">Mevcut slider bilgilerini güncelleyin</p>
</div>

<form asp-action="Edit" enctype="multipart/form-data" id="sliderForm">
    <div class="row">
        <div class="col-lg-8">
            <div class="management-form">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Id" />
                <input type="hidden" asp-for="Image" />
                
                <div class="form-group">
                    <label asp-for="Title" class="form-label">Başlık</label>
                    <input asp-for="Title" class="form-control" placeholder="Slider başlığını girin" required />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
                
                <div class="form-group">
                    <label asp-for="Description" class="form-label">Açıklama</label>
                    <textarea asp-for="Description" class="form-control" rows="3" placeholder="Slider açıklamasını girin"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
                
                <div class="form-group">
                    <label asp-for="Link" class="form-label">Link</label>
                    <input asp-for="Link" class="form-control" placeholder="https://example.com" />
                    <span asp-validation-for="Link" class="text-danger"></span>
                </div>
                
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" asp-for="IsActive" />
                    <label class="form-check-label" asp-for="IsActive">Aktif</label>
                </div>
            </div>
        </div>
        
        <div class="col-lg-4">
            <div class="image-upload-container">
                <h5 class="mb-3">
                    <i class="fas fa-image me-2"></i>Slider Görseli
                </h5>
                
                @if (!string.IsNullOrEmpty(Model.Image))
                {
                    <div class="current-image-container mb-3">
                        <h6 class="text-muted mb-2">Mevcut Görsel</h6>
                        <div class="current-image-wrapper">
                            <img src="/Img/Sliders/@Model.Image" alt="Mevcut Slider Görseli" class="current-image" style="max-width: 100%; height: auto; border-radius: 8px;" />
                        </div>
                        <div class="image-actions mt-2">
                            <button type="button" class="btn btn-sm btn-outline-primary" onclick="showImageUpload()">
                                <i class="fas fa-edit me-1"></i>Görseli Değiştir
                            </button>
                        </div>
                    </div>
                }
                
                <div class="image-upload-area" id="uploadZone" style="@(string.IsNullOrEmpty(Model.Image) ? "" : "display: none;")">
                    <div class="upload-icon">
                        <i class="fas fa-cloud-upload-alt"></i>
                    </div>
                    <div class="upload-text">
                        <span class="upload-title">Görsel Yükle</span>
                        <span class="upload-subtitle">Sürükle & Bırak veya Tıkla</span>
                    </div>
                    <input name="Image" id="Image" class="form-control d-none" type="file" accept="image/*" />
                </div>
                
                <!-- Image Preview -->
                <div id="imagePreview" class="image-preview mt-3" style="display: none;">
                    <div class="preview-header">
                        <span class="preview-title">Yeni Görsel Önizleme</span>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="clearImagePreview()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <img id="previewImg" src="" alt="Yeni görsel önizleme" class="preview-img" />
                    <div class="preview-info">
                        <div class="file-name" id="fileName"></div>
                        <div class="file-size" id="fileSize"></div>
                    </div>
                </div>
                
                <!-- File Info -->
                <div class="file-info mt-3">
                    <div class="info-item">
                        <i class="fas fa-check-circle text-success me-2"></i>
                        Desteklenen formatlar: JPG, PNG, GIF, WebP
                    </div>
                    <div class="info-item">
                        <i class="fas fa-info-circle text-info me-2"></i>
                        Maksimum dosya boyutu: 5MB
                    </div>
                    <div class="info-item">
                        <i class="fas fa-lightbulb text-warning me-2"></i>
                        Önerilen boyut: 1920x600 piksel
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="form-actions mt-4">
        <button type="submit" class="btn btn-primary">
            <i class="fas fa-save me-2"></i>Değişiklikleri Kaydet
        </button>
        <a asp-action="Index" class="btn btn-secondary">
            <i class="fas fa-arrow-left me-2"></i>Geri Dön
        </a>
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Initialize drag and drop functionality
        document.addEventListener('DOMContentLoaded', function() {
            initDragAndDrop();
        });
        
        function initDragAndDrop() {
            const uploadZone = document.getElementById('uploadZone');
            const fileInput = document.getElementById('Image');
            
            if (!uploadZone || !fileInput) return;
            
            // Drag and drop events
            uploadZone.addEventListener('dragover', function(e) {
                e.preventDefault();
                uploadZone.classList.add('dragover');
            });
            
            uploadZone.addEventListener('dragleave', function(e) {
                e.preventDefault();
                uploadZone.classList.remove('dragover');
            });
            
            uploadZone.addEventListener('drop', function(e) {
                e.preventDefault();
                uploadZone.classList.remove('dragover');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    fileInput.files = files;
                    handleFileSelect(files[0]);
                }
            });
            
            // Click to upload
            uploadZone.addEventListener('click', function() {
                fileInput.click();
            });
            
            // File input change
            fileInput.addEventListener('change', function(e) {
                if (e.target.files.length > 0) {
                    handleFileSelect(e.target.files[0]);
                }
            });
        }
        
        function handleFileSelect(file) {
            // File validation
            if (!file.type.match('image.*')) {
                showAlert('Lütfen sadece resim dosyası seçin!', 'danger');
                return;
            }
            
            if (file.size > 5 * 1024 * 1024) {
                showAlert('Dosya boyutu 5MB\'dan büyük olamaz!', 'danger');
                return;
            }
            
            // Show preview
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('previewImg').src = e.target.result;
                document.getElementById('fileName').textContent = file.name;
                document.getElementById('fileSize').textContent = formatFileSize(file.size);
                document.getElementById('imagePreview').style.display = 'block';
                
                // Update upload zone
                document.getElementById('uploadZone').classList.add('has-file');
            };
            reader.readAsDataURL(file);
        }
        
        function clearImagePreview() {
            document.getElementById('Image').value = '';
            document.getElementById('imagePreview').style.display = 'none';
            document.getElementById('uploadZone').classList.remove('has-file');
        }
        
        function showImageUpload() {
            document.querySelector('.current-image-container').style.display = 'none';
            document.getElementById('uploadZone').style.display = 'block';
        }
        
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        function showAlert(message, type = 'info') {
            const alertContainer = document.createElement('div');
            alertContainer.className = `alert alert-${type} alert-dismissible fade show`;
            alertContainer.innerHTML = `
                <i class="fas fa-${type === 'danger' ? 'exclamation-circle' : 'info-circle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            // Insert at the top of the page content
            const pageContent = document.querySelector('.management-header');
            if (pageContent) {
                pageContent.insertAdjacentElement('afterend', alertContainer);
                
                // Auto-remove after 5 seconds
                setTimeout(() => {
                    if (alertContainer) {
                        const bsAlert = new bootstrap.Alert(alertContainer);
                        bsAlert.close();
                    }
                }, 5000);
            }
        }
    </script>
}


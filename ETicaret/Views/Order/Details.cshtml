@model ETicaret.Core.Models.OrderViewModel
@{
    ViewData["Title"] = "Sipariş Detayı";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="fw-bold text-primary mb-0">
                    <i class="fas fa-receipt me-3"></i> Sipariş Detayı
                </h2>
                <a href="@Url.Action("MyOrders")" class="btn btn-outline-primary">
                    <i class="fas fa-arrow-left me-2"></i> Siparişlerime Dön
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Sol Taraf - Sipariş Bilgileri -->
        <div class="col-lg-8">
            <!-- Sipariş Özeti -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0 fw-bold">
                        <i class="fas fa-info-circle me-2"></i> Sipariş Bilgileri
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="info-item mb-3">
                                <label class="fw-bold text-muted">Sipariş Numarası:</label>
                                <p class="mb-0 fw-bold text-primary">@Model.OrderNumber</p>
                            </div>
                            <div class="info-item mb-3">
                                <label class="fw-bold text-muted">Sipariş Tarihi:</label>
                                <p class="mb-0">@Model.CreateDate.ToString("dd MMMM yyyy, HH:mm")</p>
                            </div>
                            <div class="info-item mb-3">
                                <label class="fw-bold text-muted">Sipariş Durumu:</label>
                                <p class="mb-0">
                                    <span class="badge @GetStatusBadgeClass(Model.OrderStatus)">
                                        @GetStatusText(Model.OrderStatus)
                                    </span>
                                </p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item mb-3">
                                <label class="fw-bold text-muted">Ödeme Yöntemi:</label>
                                <p class="mb-0">@GetPaymentMethodText(Model.PaymentMethod)</p>
                            </div>
                            <div class="info-item mb-3">
                                <label class="fw-bold text-muted">Toplam Tutar:</label>
                                <p class="mb-0 fw-bold text-success fs-5">@Model.GrandTotal.ToString("F2") ₺</p>
                            </div>
                            @if (!string.IsNullOrEmpty(Model.Notes))
                            {
                                <div class="info-item mb-3">
                                    <label class="fw-bold text-muted">Notlar:</label>
                                    <p class="mb-0">@Model.Notes</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sipariş Ürünleri -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0 fw-bold">
                        <i class="fas fa-shopping-bag me-2"></i> Sipariş Ürünleri (@Model.OrderItems.Count ürün)
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-success">
                                <tr>
                                    <th class="fw-bold">Ürün</th>
                                    <th class="text-center fw-bold">Fiyat</th>
                                    <th class="text-center fw-bold">Miktar</th>
                                    <th class="text-center fw-bold">Toplam</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.OrderItems)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <img src="~/Img/Products/@item.ProductImage" 
                                                     alt="@item.ProductName" 
                                                     class="order-product-image me-3"
                                                     style="width: 60px; height: 60px; object-fit: cover; border-radius: 8px;">
                                                <div>
                                                    <h6 class="mb-1 fw-bold">@item.ProductName</h6>
                                                    <small class="text-muted">Ürün Kodu: @item.ProductId</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="text-center">
                                            <span class="fw-bold text-success">@item.Price.ToString("F2") ₺</span>
                                        </td>
                                        <td class="text-center">
                                            <span class="badge bg-primary">@item.Quantity</span>
                                        </td>
                                        <td class="text-center">
                                            <span class="fw-bold text-primary">@item.TotalPrice.ToString("F2") ₺</span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Teslimat Adresi -->
            <div class="card shadow-sm">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0 fw-bold">
                        <i class="fas fa-map-marker-alt me-2"></i> Teslimat Adresi
                    </h5>
                </div>
                <div class="card-body">
                    <div class="address-details">
                        <h6 class="fw-bold text-primary mb-2">@Model.Address.Title</h6>
                        <p class="mb-1"><strong>@Model.Address.FullName</strong></p>
                        <p class="mb-1">@Model.Address.Phone</p>
                        <p class="mb-1">@Model.Address.City / @Model.Address.District</p>
                        <p class="mb-0 text-muted">@Model.Address.FullAddress</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sağ Taraf - Fiyat Detayları ve İşlemler -->
        <div class="col-lg-4">
            <div class="card shadow-sm sticky-top" style="top: 20px;">
                <div class="card-header bg-warning text-white">
                    <h5 class="mb-0 fw-bold">
                        <i class="fas fa-calculator me-2"></i> Fiyat Detayları
                    </h5>
                </div>
                <div class="card-body">
                    <div class="price-breakdown">
                        <div class="d-flex justify-content-between mb-3">
                            <span class="fw-semibold">Ara Toplam:</span>
                            <span class="fw-bold">@Model.TotalAmount.ToString("F2") ₺</span>
                        </div>
                        <div class="d-flex justify-content-between mb-3">
                            <span class="fw-semibold">Kargo Ücreti:</span>
                            <span class="fw-bold @(Model.ShippingCost == 0 ? "text-success" : "")">
                                @(Model.ShippingCost == 0 ? "Ücretsiz" : Model.ShippingCost.ToString("F2") + " ₺")
                            </span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between mb-4">
                            <span class="h5 mb-0 fw-bold">Toplam:</span>
                            <span class="h4 mb-0 text-primary fw-bold">@Model.GrandTotal.ToString("F2") ₺</span>
                        </div>
                    </div>

                    <!-- Sipariş Durumu İndikatörü -->
                    <div class="order-status-tracker mb-4">
                        <h6 class="fw-bold mb-3">Sipariş Durumu</h6>
                        <div class="status-steps">
                            <div class="status-step @(Model.OrderStatus >= ETicaret.Core.Entities.OrderStatus.Pending ? "completed" : "")">
                                <div class="step-icon">
                                    <i class="fas fa-clock"></i>
                                </div>
                                <div class="step-content">
                                    <h6 class="mb-1">Sipariş Alındı</h6>
                                    <small class="text-muted">Siparişiniz alındı</small>
                                </div>
                            </div>
                            <div class="status-step @(Model.OrderStatus >= ETicaret.Core.Entities.OrderStatus.Confirmed ? "completed" : "")">
                                <div class="step-icon">
                                    <i class="fas fa-check"></i>
                                </div>
                                <div class="step-content">
                                    <h6 class="mb-1">Onaylandı</h6>
                                    <small class="text-muted">Sipariş onaylandı</small>
                                </div>
                            </div>
                            <div class="status-step @(Model.OrderStatus >= ETicaret.Core.Entities.OrderStatus.Preparing ? "completed" : "")">
                                <div class="step-icon">
                                    <i class="fas fa-box"></i>
                                </div>
                                <div class="step-content">
                                    <h6 class="mb-1">Hazırlanıyor</h6>
                                    <small class="text-muted">Ürünler hazırlanıyor</small>
                                </div>
                            </div>
                            <div class="status-step @(Model.OrderStatus >= ETicaret.Core.Entities.OrderStatus.Shipped ? "completed" : "")">
                                <div class="step-icon">
                                    <i class="fas fa-truck"></i>
                                </div>
                                <div class="step-content">
                                    <h6 class="mb-1">Kargoya Verildi</h6>
                                    <small class="text-muted">Kargoya teslim edildi</small>
                                </div>
                            </div>
                            <div class="status-step @(Model.OrderStatus >= ETicaret.Core.Entities.OrderStatus.Delivered ? "completed" : "")">
                                <div class="step-icon">
                                    <i class="fas fa-home"></i>
                                </div>
                                <div class="step-content">
                                    <h6 class="mb-1">Teslim Edildi</h6>
                                    <small class="text-muted">Sipariş teslim edildi</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- İşlem Butonları -->
                    <div class="action-buttons">
                        @if (Model.OrderStatus == ETicaret.Core.Entities.OrderStatus.Pending)
                        {
                            <button type="button" class="btn btn-danger w-100 mb-2 cancel-order-btn" data-order-id="@Model.Id">
                                <i class="fas fa-times me-2"></i> Siparişi İptal Et
                            </button>
                        }
                        
                        <a href="@Url.Action("MyOrders")" class="btn btn-outline-primary w-100">
                            <i class="fas fa-list me-2"></i> Tüm Siparişlerim
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Sipariş iptal etme
            $('.cancel-order-btn').on('click', function() {
                var orderId = $(this).data('order-id');
                var btn = $(this);
                
                if (confirm('Bu siparişi iptal etmek istediğinizden emin misiniz?')) {
                    // Loading durumu
                    btn.prop('disabled', true);
                    btn.html('<i class="fas fa-spinner fa-spin me-2"></i> İptal Ediliyor...');
                    
                    $.post('@Url.Action("CancelOrder")', { id: orderId })
                    .done(function(response) {
                        if (response.success) {
                            showNotification(response.message, 'success');
                            // Sayfayı yenile
                            setTimeout(() => {
                                location.reload();
                            }, 1500);
                        } else {
                            showNotification(response.message, 'error');
                        }
                    })
                    .fail(function() {
                        showNotification('Bir hata oluştu.', 'error');
                    })
                    .always(function() {
                        btn.prop('disabled', false);
                        btn.html('<i class="fas fa-times me-2"></i> Siparişi İptal Et');
                    });
                }
            });

            // Sipariş durumu güncelleme (otomatik)
            setInterval(function() {
                updateOrderStatus();
            }, 30000); // 30 saniyede bir kontrol et
        });

        function updateOrderStatus() {
            var orderId = @Model.Id;
            
            $.get('@Url.Action("GetOrderStatus")', { id: orderId })
            .done(function(response) {
                if (response.success) {
                    // Durum değişmişse sayfayı yenile
                    var currentStatus = '@Model.OrderStatus';
                    if (currentStatus !== response.status) {
                        location.reload();
                    }
                }
            });
        }

        function showNotification(message, type) {
            const toast = document.createElement('div');
            toast.className = `toast-notification toast-${type}`;
            toast.innerHTML = `
                <div class="toast-content">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(toast);
            setTimeout(() => toast.classList.add('show'), 100);
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }
    </script>
}

@functions {
    string GetStatusBadgeClass(ETicaret.Core.Entities.OrderStatus status)
    {
        return status switch
        {
            ETicaret.Core.Entities.OrderStatus.Pending => "bg-warning",
            ETicaret.Core.Entities.OrderStatus.Confirmed => "bg-info",
            ETicaret.Core.Entities.OrderStatus.Preparing => "bg-primary",
            ETicaret.Core.Entities.OrderStatus.Shipped => "bg-secondary",
            ETicaret.Core.Entities.OrderStatus.Delivered => "bg-success",
            ETicaret.Core.Entities.OrderStatus.Cancelled => "bg-danger",
            ETicaret.Core.Entities.OrderStatus.Returned => "bg-dark",
            _ => "bg-secondary"
        };
    }

    string GetStatusText(ETicaret.Core.Entities.OrderStatus status)
    {
        return status switch
        {
            ETicaret.Core.Entities.OrderStatus.Pending => "Beklemede",
            ETicaret.Core.Entities.OrderStatus.Confirmed => "Onaylandı",
            ETicaret.Core.Entities.OrderStatus.Preparing => "Hazırlanıyor",
            ETicaret.Core.Entities.OrderStatus.Shipped => "Kargoya Verildi",
            ETicaret.Core.Entities.OrderStatus.Delivered => "Teslim Edildi",
            ETicaret.Core.Entities.OrderStatus.Cancelled => "İptal Edildi",
            ETicaret.Core.Entities.OrderStatus.Returned => "İade Edildi",
            _ => "Bilinmiyor"
        };
    }

    string GetPaymentMethodText(ETicaret.Core.Entities.PaymentMethod method)
    {
        return method switch
        {
            ETicaret.Core.Entities.PaymentMethod.CreditCard => "Kredi Kartı",
            ETicaret.Core.Entities.PaymentMethod.DebitCard => "Banka Kartı",
            ETicaret.Core.Entities.PaymentMethod.CashOnDelivery => "Kapıda Ödeme",
            ETicaret.Core.Entities.PaymentMethod.BankTransfer => "Havale/EFT",
            ETicaret.Core.Entities.PaymentMethod.DigitalWallet => "Dijital Cüzdan",
            _ => "Bilinmiyor"
        };
    }
}

<style>
    .info-item {
        padding: 10px 0;
        border-bottom: 1px solid #f0f0f0;
    }
    
    .info-item:last-child {
        border-bottom: none;
    }
    
    .order-product-image {
        border: 2px solid #e9ecef;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    
    .order-product-image:hover {
        transform: scale(1.05);
        box-shadow: 0 3px 12px rgba(0,0,0,0.15);
    }
    
    .address-details {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 12px;
        border-left: 4px solid #0d6efd;
    }
    
    .status-steps {
        position: relative;
    }
    
    .status-step {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        position: relative;
    }
    
    .status-step:not(:last-child)::after {
        content: '';
        position: absolute;
        left: 15px;
        top: 40px;
        width: 2px;
        height: 20px;
        background: #dee2e6;
    }
    
    .status-step.completed:not(:last-child)::after {
        background: #28a745;
    }
    
    .step-icon {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background: #dee2e6;
        color: #6c757d;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
        font-size: 12px;
        transition: all 0.3s ease;
    }
    
    .status-step.completed .step-icon {
        background: #28a745;
        color: white;
    }
    
    .step-content h6 {
        margin: 0;
        font-size: 14px;
        font-weight: 600;
    }
    
    .step-content small {
        font-size: 12px;
    }
    
    .card {
        border-radius: 16px;
        border: none;
        overflow: hidden;
    }
    
    .card-header {
        background: linear-gradient(135deg, #0d6efd 0%, #0b5ed7 100%);
        border-bottom: none;
        padding: 20px;
    }
    
    .table th {
        border-top: none;
        font-weight: 700;
        color: #495057;
        font-size: 16px;
        padding: 20px 15px;
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
    }
    
    .table td {
        padding: 20px 15px;
        vertical-align: middle;
    }
    
    .badge {
        font-size: 12px;
        padding: 8px 12px;
        border-radius: 20px;
        font-weight: 600;
    }
    
    .btn {
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    
    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    
    .sticky-top {
        position: sticky;
        top: 20px;
    }
    
    .toast-notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.2);
        padding: 20px 25px;
        z-index: 9999;
        transform: translateX(100%);
        transition: transform 0.4s ease;
        border-left: 5px solid;
        min-width: 300px;
    }
    
    .toast-notification.show {
        transform: translateX(0);
    }
    
    .toast-notification.toast-success {
        border-left-color: #28a745;
    }
    
    .toast-notification.toast-error {
        border-left-color: #dc3545;
    }
    
    .toast-content {
        display: flex;
        align-items: center;
        gap: 15px;
        font-weight: 600;
    }
    
    .toast-content i {
        font-size: 20px;
    }
    
    .toast-success .toast-content i {
        color: #28a745;
    }
    
    .toast-error .toast-content i {
        color: #dc3545;
    }
</style>

namespace ETicaret.Core.Configuration
{
    public class AppSettings
    {
        public string BaseUrl { get; set; } = string.Empty;
        public string AdminEmail { get; set; } = string.Empty;
        public string SupportEmail { get; set; } = string.Empty;
        public string CompanyName { get; set; } = string.Empty;
        public string CompanyAddress { get; set; } = string.Empty;
        public string CompanyPhone { get; set; } = string.Empty;
        public string CompanyWebsite { get; set; } = string.Empty;
        public bool EnableEmailNotifications { get; set; } = true;
        public bool EnableSmsNotifications { get; set; } = false;
        public bool EnablePushNotifications { get; set; } = false;
        public int DefaultPageSize { get; set; } = 20;
        public int MaxPageSize { get; set; } = 100;
        public int CacheExpirationMinutes { get; set; } = 30;
        public int SessionTimeoutMinutes { get; set; } = 60;
        public bool EnableDetailedLogging { get; set; } = false;
        public bool EnablePerformanceMonitoring { get; set; } = false;
        public string DefaultLanguage { get; set; } = "tr-TR";
        public string DefaultCurrency { get; set; } = "TRY";
        public decimal DefaultShippingCost { get; set; } = 0;
        public decimal FreeShippingThreshold { get; set; } = 500;
        public int MaxImageUploadSize { get; set; } = 5242880; // 5MB
        public int MaxFileUploadSize { get; set; } = 10485760; // 10MB
        public string[] AllowedImageExtensions { get; set; } = { ".jpg", ".jpeg", ".png", ".gif", ".webp" };
        public string[] AllowedDocumentExtensions { get; set; } = { ".pdf", ".doc", ".docx", ".txt" };
        public bool EnableProductReviews { get; set; } = true;
        public bool EnableProductRatings { get; set; } = true;
        public bool EnableWishlist { get; set; } = true;
        public bool EnableProductComparison { get; set; } = true;
        public bool EnableSocialLogin { get; set; } = false;
        public bool EnableTwoFactorAuthentication { get; set; } = false;
        public int PasswordMinLength { get; set; } = 8;
        public bool RequireStrongPassword { get; set; } = true;
        public int LoginAttemptLimit { get; set; } = 5;
        public int LoginLockoutMinutes { get; set; } = 15;
        public bool EnableAuditLogging { get; set; } = true;
        public bool EnableDataEncryption { get; set; } = true;
        public string EncryptionKey { get; set; } = string.Empty;
        public bool EnableApiRateLimiting { get; set; } = true;
        public int ApiRateLimitPerMinute { get; set; } = 100;
        public bool EnableCors { get; set; } = false;
        public string[] AllowedCorsOrigins { get; set; } = Array.Empty<string>();
        public bool EnableSwagger { get; set; } = false;
        public bool EnableHealthChecks { get; set; } = true;
        public bool EnableMetrics { get; set; } = false;
        public string DatabaseProvider { get; set; } = "SqlServer";
        public int DatabaseCommandTimeout { get; set; } = 30;
        public bool EnableDatabaseLogging { get; set; } = false;
        public bool EnableQueryOptimization { get; set; } = true;
        public int MaxConcurrentConnections { get; set; } = 100;
        public bool EnableConnectionPooling { get; set; } = true;
        public int ConnectionPoolSize { get; set; } = 10;
        public bool EnableDistributedCaching { get; set; } = false;
        public string CacheProvider { get; set; } = "Memory";
        public string RedisConnectionString { get; set; } = string.Empty;
        public int CacheDefaultExpirationMinutes { get; set; } = 30;
        public bool EnableCacheCompression { get; set; } = false;
        public bool EnableBackgroundJobs { get; set; } = true;
        public int BackgroundJobIntervalMinutes { get; set; } = 60;
        public bool EnableEmailQueue { get; set; } = true;
        public int EmailQueueBatchSize { get; set; } = 10;
        public bool EnableScheduledTasks { get; set; } = true;
        public string ScheduledTasksCronExpression { get; set; } = "0 0 * * *"; // Daily at midnight
        public bool EnableMaintenanceMode { get; set; } = false;
        public string MaintenanceMessage { get; set; } = "Site bakımda. Lütfen daha sonra tekrar deneyin.";
        public bool EnableErrorReporting { get; set; } = true;
        public string ErrorReportingEndpoint { get; set; } = string.Empty;
        public bool EnableUserAnalytics { get; set; } = false;
        public string AnalyticsTrackingId { get; set; } = string.Empty;
        public bool EnableSeoOptimization { get; set; } = true;
        public string DefaultMetaDescription { get; set; } = string.Empty;
        public string DefaultMetaKeywords { get; set; } = string.Empty;
        public bool EnableSitemapGeneration { get; set; } = true;
        public int SitemapUpdateIntervalHours { get; set; } = 24;
        public bool EnableRobotsTxt { get; set; } = true;
        public bool EnableFavicon { get; set; } = true;
        public string FaviconPath { get; set; } = "/favicon.ico";
        public bool EnablePwa { get; set; } = false;
        public string PwaManifestPath { get; set; } = "/manifest.json";
        public bool EnableServiceWorker { get; set; } = false;
        public string ServiceWorkerPath { get; set; } = "/sw.js";
        public bool EnableOfflineSupport { get; set; } = false;
        public string PushNotificationPublicKey { get; set; } = string.Empty;
        public string PushNotificationPrivateKey { get; set; } = string.Empty;
        public bool EnableWebPush { get; set; } = false;
        public string WebPushSubject { get; set; } = string.Empty;
        public string WebPushPublicKey { get; set; } = string.Empty;
        public string WebPushPrivateKey { get; set; } = string.Empty;
    }

    public class EmailSettings
    {
        public string SmtpHost { get; set; } = string.Empty;
        public int SmtpPort { get; set; } = 587;
        public string SmtpUsername { get; set; } = string.Empty;
        public string SmtpPassword { get; set; } = string.Empty;
        public bool EnableSsl { get; set; } = true;
        public string FromEmail { get; set; } = string.Empty;
        public string FromName { get; set; } = string.Empty;
        public int TimeoutSeconds { get; set; } = 30;
        public bool EnableRetry { get; set; } = true;
        public int MaxRetryAttempts { get; set; } = 3;
        public int RetryDelaySeconds { get; set; } = 5;
        public bool EnableQueue { get; set; } = true;
        public int QueueBatchSize { get; set; } = 10;
        public int QueueProcessingIntervalSeconds { get; set; } = 60;
        public bool EnableBounceHandling { get; set; } = true;
        public bool EnableComplaintHandling { get; set; } = true;
        public bool EnableDeliveryTracking { get; set; } = true;
        public string BounceEmailAddress { get; set; } = string.Empty;
        public string ComplaintEmailAddress { get; set; } = string.Empty;
        public bool EnableEmailValidation { get; set; } = true;
        public string EmailValidationApiKey { get; set; } = string.Empty;
        public bool EnableSpamFiltering { get; set; } = true;
        public string SpamFilterApiKey { get; set; } = string.Empty;
        public bool EnableEmailTemplates { get; set; } = true;
        public string EmailTemplatesPath { get; set; } = "/Templates/Email";
        public bool EnableEmailPersonalization { get; set; } = true;
        public bool EnableEmailTracking { get; set; } = true;
        public string EmailTrackingPixelUrl { get; set; } = string.Empty;
        public bool EnableUnsubscribeHandling { get; set; } = true;
        public string UnsubscribeUrl { get; set; } = string.Empty;
        public bool EnableEmailAnalytics { get; set; } = true;
        public string EmailAnalyticsApiKey { get; set; } = string.Empty;
    }

    public class DatabaseSettings
    {
        public string ConnectionString { get; set; } = string.Empty;
        public string Provider { get; set; } = "SqlServer";
        public int CommandTimeout { get; set; } = 30;
        public bool EnableRetryOnFailure { get; set; } = true;
        public int MaxRetryCount { get; set; } = 3;
        public int MaxRetryDelaySeconds { get; set; } = 30;
        public bool EnableSensitiveDataLogging { get; set; } = false;
        public bool EnableDetailedErrors { get; set; } = false;
        public bool EnableQuerySplitting { get; set; } = true;
        public bool EnableLazyLoading { get; set; } = false;
        public bool EnableChangeTracking { get; set; } = true;
        public bool EnableAutoDetectChanges { get; set; } = true;
        public bool EnableValidateOnSave { get; set; } = true;
        public int MaxPoolSize { get; set; } = 100;
        public int MinPoolSize { get; set; } = 0;
        public int ConnectionLifetime { get; set; } = 0;
        public bool EnableConnectionPooling { get; set; } = true;
        public bool EnableMultipleActiveResultSets { get; set; } = false;
        public bool EnableTrustServerCertificate { get; set; } = false;
        public bool EnableEncrypt { get; set; } = true;
        public string TrustStore { get; set; } = string.Empty;
        public string Certificate { get; set; } = string.Empty;
        public string Key { get; set; } = string.Empty;
        public bool EnableColumnEncryption { get; set; } = false;
        public string ColumnEncryptionKey { get; set; } = string.Empty;
        public bool EnableAlwaysEncrypted { get; set; } = false;
        public string AlwaysEncryptedKey { get; set; } = string.Empty;
        public bool EnableTransparentDataEncryption { get; set; } = false;
        public string TransparentDataEncryptionKey { get; set; } = string.Empty;
        public bool EnableBackupEncryption { get; set; } = false;
        public string BackupEncryptionKey { get; set; } = string.Empty;
        public bool EnableCompression { get; set; } = true;
        public int CompressionLevel { get; set; } = 6;
        public bool EnableReadOnlyReplicas { get; set; } = false;
        public string[] ReadOnlyReplicaConnectionStrings { get; set; } = Array.Empty<string>();
        public bool EnableFailover { get; set; } = false;
        public string[] FailoverConnectionStrings { get; set; } = Array.Empty<string>();
        public int FailoverTimeoutSeconds { get; set; } = 30;
        public bool EnableHealthChecks { get; set; } = true;
        public int HealthCheckIntervalSeconds { get; set; } = 60;
        public bool EnablePerformanceCounters { get; set; } = false;
        public bool EnableQueryPlanCaching { get; set; } = true;
        public int QueryPlanCacheSize { get; set; } = 1000;
        public bool EnableStatistics { get; set; } = true;
        public int StatisticsUpdateIntervalSeconds { get; set; } = 300;
        public bool EnableIndexOptimization { get; set; } = true;
        public int IndexOptimizationIntervalHours { get; set; } = 24;
        public bool EnableFragmentationAnalysis { get; set; } = true;
        public int FragmentationThreshold { get; set; } = 30;
        public bool EnableAutoShrinking { get; set; } = false;
        public bool EnableAutoGrowth { get; set; } = true;
        public int AutoGrowthSizeMB { get; set; } = 100;
        public int MaxSizeMB { get; set; } = 0; // 0 = unlimited
        public bool EnableLogShipping { get; set; } = false;
        public string LogShippingDestination { get; set; } = string.Empty;
        public int LogShippingIntervalMinutes { get; set; } = 15;
        public bool EnableMirroring { get; set; } = false;
        public string MirroringPartner { get; set; } = string.Empty;
        public bool EnableReplication { get; set; } = false;
        public string ReplicationPublisher { get; set; } = string.Empty;
        public string ReplicationSubscriber { get; set; } = string.Empty;
        public bool EnableClustering { get; set; } = false;
        public string[] ClusterNodes { get; set; } = Array.Empty<string>();
        public bool EnableAlwaysOn { get; set; } = false;
        public string AlwaysOnAvailabilityGroup { get; set; } = string.Empty;
        public bool EnableDistributedTransactions { get; set; } = false;
        public string DistributedTransactionCoordinator { get; set; } = string.Empty;
        public bool EnableSnapshotIsolation { get; set; } = false;
        public bool EnableReadCommittedSnapshot { get; set; } = false;
        public bool EnableDelayedDurability { get; set; } = false;
        public bool EnableAcceleratedDatabaseRecovery { get; set; } = false;
        public bool EnableIntelligentQueryProcessing { get; set; } = true;
        public bool EnableAutomaticTuning { get; set; } = true;
        public bool EnableQueryStore { get; set; } = true;
        public int QueryStoreSizeMB { get; set; } = 1000;
        public bool EnableExtendedEvents { get; set; } = false;
        public string ExtendedEventsSessionName { get; set; } = string.Empty;
        public bool EnableProfiler { get; set; } = false;
        public string ProfilerTraceName { get; set; } = string.Empty;
        public bool EnableActivityMonitor { get; set; } = false;
        public bool EnableDeadlockDetection { get; set; } = true;
        public bool EnableBlockingDetection { get; set; } = true;
        public int BlockingThresholdSeconds { get; set; } = 30;
        public bool EnableLongRunningQueryDetection { get; set; } = true;
        public int LongRunningQueryThresholdSeconds { get; set; } = 300;
        public bool EnableMemoryPressureDetection { get; set; } = true;
        public int MemoryPressureThresholdMB { get; set; } = 1000;
        public bool EnableDiskSpaceMonitoring { get; set; } = true;
        public int DiskSpaceThresholdMB { get; set; } = 1000;
        public bool EnableBackupMonitoring { get; set; } = true;
        public int BackupRetentionDays { get; set; } = 30;
        public bool EnableRestoreTesting { get; set; } = false;
        public int RestoreTestIntervalDays { get; set; } = 7;
        public bool EnableSecurityAuditing { get; set; } = true;
        public string SecurityAuditPath { get; set; } = string.Empty;
        public bool EnableComplianceReporting { get; set; } = false;
        public string ComplianceReportPath { get; set; } = string.Empty;
        public bool EnableDataClassification { get; set; } = false;
        public string DataClassificationPolicy { get; set; } = string.Empty;
        public bool EnableDataMasking { get; set; } = false;
        public string DataMaskingPolicy { get; set; } = string.Empty;
        public bool EnableRowLevelSecurity { get; set; } = false;
        public string RowLevelSecurityPolicy { get; set; } = string.Empty;
        public bool EnableDynamicDataMasking { get; set; } = false;
        public string DynamicDataMaskingPolicy { get; set; } = string.Empty;
    }
}
